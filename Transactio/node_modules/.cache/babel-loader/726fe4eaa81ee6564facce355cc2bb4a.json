{"ast":null,"code":"var _jsxFileName = \"/home/dell/Desktop/Transact.io_app/Transactio/src/context/TransactionContext.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { contractAbi, transactionAddress } from '../utils/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/React.createContext();\nconst {\n  ethereum\n} = window;\n\nfunction getEthereumContract() {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionContract = new ethers.Contract(transactionAddress, contractAbi, signer);\n}\n\nexport const TransactionProvider = _ref => {\n  let {\n    children\n  } = _ref;\n\n  const checkIfWalletIsConnected = () => {\n    if (!ethereum) alert(\"please install metamask\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      test: 'test'\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n};\n_c = TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["React","useState","useEffect","ethers","contractAbi","transactionAddress","TransactionContext","createContext","ethereum","window","getEthereumContract","provider","providers","Web3Provider","signer","getSigner","transactionContract","Contract","TransactionProvider","children","checkIfWalletIsConnected","alert","test"],"sources":["/home/dell/Desktop/Transact.io_app/Transactio/src/context/TransactionContext.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { contractAbi, transactionAddress } from '../utils/constants';\n\nexport const TransactionContext = React.createContext();\n\nconst { ethereum } = window;\nfunction getEthereumContract() {\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  const transactionContract = new ethers.Contract(transactionAddress, contractAbi, signer);\n}\n\nexport const TransactionProvider = ({ children }) => {\n\n    const checkIfWalletIsConnected = () => {\n        if(!ethereum) alert(\"please install metamask\")\n    }\n\n  return <TransactionContext.Provider value={{ test: 'test' }}>{children}</TransactionContext.Provider>;\n};\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,EAAsBC,kBAAtB,QAAgD,oBAAhD;;AAEA,OAAO,MAAMC,kBAAkB,gBAAGN,KAAK,CAACO,aAAN,EAA3B;AAEP,MAAM;EAAEC;AAAF,IAAeC,MAArB;;AACA,SAASC,mBAAT,GAA+B;EAC7B,MAAMC,QAAQ,GAAG,IAAIR,MAAM,CAACS,SAAP,CAAiBC,YAArB,CAAkCL,QAAlC,CAAjB;EACA,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;EACA,MAAMC,mBAAmB,GAAG,IAAIb,MAAM,CAACc,QAAX,CAAoBZ,kBAApB,EAAwCD,WAAxC,EAAqDU,MAArD,CAA5B;AACD;;AAED,OAAO,MAAMI,mBAAmB,GAAG,QAAkB;EAAA,IAAjB;IAAEC;EAAF,CAAiB;;EAEjD,MAAMC,wBAAwB,GAAG,MAAM;IACnC,IAAG,CAACZ,QAAJ,EAAca,KAAK,CAAC,yBAAD,CAAL;EACjB,CAFD;;EAIF,oBAAO,QAAC,kBAAD,CAAoB,QAApB;IAA6B,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAR,CAApC;IAAA,UAAuDH;EAAvD;IAAA;IAAA;IAAA;EAAA,QAAP;AACD,CAPM;KAAMD,mB"},"metadata":{},"sourceType":"module"}